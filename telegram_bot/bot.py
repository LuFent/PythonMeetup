from dotenv import load_dotenv
import os
from django.conf import settings
from telegram import KeyboardButton, Update
import telegram
from telegram.ext import Filters
from telegram.ext import CallbackContext
from telegram.ext import Updater, filters
from telegram.ext import CommandHandler, MessageHandler, CallbackQueryHandler, PreCheckoutQueryHandler
from telegram import ReplyKeyboardMarkup, ParseMode, LabeledPrice
from .models import *
from .bot_tools import *


CURRENT_EVENT = Event.objects.get_current()
SECTIONS = CURRENT_EVENT.sections.all()

states_database = {}
main_menu_keyboard = [['–ü—Ä–æ–≥—Ä–∞–º–º–∞', '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É', '–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è'], ['–î–æ–Ω–∞—Ç']]
contact_keyboard = [['–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã', '–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã']]
accept_keyboard = [['–†–∞–∑—Ä–µ—à–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö', '–û—Ç–∫–∞–∑–∞—Ç—å –æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è']]


def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø–æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ü§ñ.',
        reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return 'MAIN_MENU'


def main_menu(update: Update, context: CallbackContext):
    user_reply = update.effective_message.text
    if user_reply == '–ü—Ä–æ–≥—Ä–∞–º–º–∞' or user_reply == '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É':
        events_keyboard = list(map(lambda keyboard_row: [button.name for button in keyboard_row], chunk(CURRENT_EVENT.sections.all(), 2)))
        events_keyboard.append(['–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
        update.message.reply_text(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç',
            reply_markup=ReplyKeyboardMarkup(events_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
        return 'CHOOSE_SECTION'

    elif user_reply == '–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è':
        update.message.reply_text(
            text='–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ.',
            reply_markup=ReplyKeyboardMarkup([['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']], resize_keyboard=True, one_time_keyboard=True)
        )
        return 'REGISTRATION'

    elif user_reply == '–î–æ–Ω–∞—Ç':
        update.message.reply_text(
            text='–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å'
        )
        return 'DONATION'


def choose_section(update: Update, context: CallbackContext):
    user_reply = update.effective_message.text

    if user_reply == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        update.message.reply_text(
            text='–í–æ–∑–≤—Ä–∞—Ç –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
        return 'MAIN_MENU'

    if user_reply == '–ù–∞–∑–∞–¥':
        events_keyboard = list(map(lambda keyboard_row: [button.name for button in keyboard_row],
                                   chunk(CURRENT_EVENT.sections.all(), 2)))
        events_keyboard.append(['–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
        update.message.reply_text(
            text='–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —á–∞—Å—Ç–µ–π',
            reply_markup=ReplyKeyboardMarkup(events_keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
        return 'CHOOSE_SECTION'

    try:
        chosen_section = SECTIONS.get(name=user_reply)
        possible_blocks = chosen_section.blocks.all()
        blocks_keyboard = [[f'{block.name} | {chosen_section.name}'] for block in chosen_section.blocks.all()]
        blocks_keyboard.append(['–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ù–∞–∑–∞–¥'])
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞',
                                  reply_markup=ReplyKeyboardMarkup(blocks_keyboard,
                                                                   resize_keyboard=True,
                                                                   one_time_keyboard=True))
        return 'CHOOSE_BLOCK'

    except Exception:
        update.message.reply_text(text='–û—à–∏–±–∫–∞ ‚ùå',
                                  reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True,
                                                                   one_time_keyboard=True)
                                  )
        return 'MAIN_MENU'


def choose_block(update: Update, context: CallbackContext):
    user_reply = update.effective_message.text
    if user_reply == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        update.message.reply_text(
            text='–í–æ–∑–≤—Ä–∞—Ç –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
        return 'MAIN_MENU'

    if user_reply == '–ù–∞–∑–∞–¥':
        events_keyboard = list(map(lambda keyboard_row: [button.name for button in keyboard_row],
                                   chunk(CURRENT_EVENT.sections.all(), 2)))
        events_keyboard.append(['–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
        update.message.reply_text(
            text='–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —á–∞—Å—Ç–µ–π',
            reply_markup=ReplyKeyboardMarkup(events_keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
        return 'CHOOSE_SECTION'

    try:
        chosen_block, chosen_section = map(lambda x: x.strip(), user_reply.split('|'))
        chosen_section = CURRENT_EVENT.sections.get(name=chosen_section)
        chosen_block = chosen_section.blocks.get(name=chosen_block)

        blocks_keyboard = [[f'{block.name} | {chosen_section.name}'] for block in chosen_section.blocks.all()]
        blocks_keyboard.append(['–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ù–∞–∑–∞–¥'])
        update.message.reply_text(text=build_timetable(chosen_block),
                                  parse_mode=ParseMode.MARKDOWN,
                                  reply_markup=ReplyKeyboardMarkup(blocks_keyboard,
                                                                   resize_keyboard=True,
                                                                   one_time_keyboard=True))

        return 'CHOOSE_BLOCK'

    except Exception:
        update.message.reply_text(text='–û—à–∏–±–∫–∞ ‚ùå',
                                  reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True,
                                                                   one_time_keyboard=True)
                                  )
        return 'MAIN_MENU'


def registration(update: Update, context: CallbackContext):
    user_reply = update.message.text

    if user_reply:
        if user_reply == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            update.message.reply_text(
                text='–í–æ–∑–≤—Ä–∞—Ç –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
                )
            return 'MAIN_MENU'
        user_name = update.message.from_user.first_name
        user_lastname = update.message.from_user.last_name
        user_telegram_id = update.message.from_user.id
        user, is_created = BotUser.objects.get_or_create(
            defaults={
                'name': user_name,
                'surname': user_lastname,
                'company': update.message.text
            },
            telegram_id=user_telegram_id
        )
        if not is_created:
            user = BotUser.objects.get(telegram_id=user_telegram_id)
            update.message.reply_text(
                text=f'–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏: \
                    {user.name} {user.surname} \
                    \n–†–∞–±–æ—Ç–∞–µ—Ç–µ –≤ {user.company} –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ {user.position}',
                reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
            return 'MAIN_MENU'
        elif is_created:
            Participant.objects.create(
                user=user,
                event=CURRENT_EVENT
            )
            update.message.reply_text(
                text='–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å.',
                reply_markup=ReplyKeyboardMarkup([['–ù–∞–∑–∞–¥', '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']], resize_keyboard=True, one_time_keyboard=True)
            )
            return 'REGISTRATION_END'


def registration_end(update: Update, context: CallbackContext):
    user_reply = update.message.text

    if user_reply:
        if user_reply == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            update.message.reply_text(
                text='–í–æ–∑–≤—Ä–∞—Ç –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
                )
            return 'MAIN_MENU'

        elif user_reply == '–ù–∞–∑–∞–¥':
            update.message.reply_text(
                text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏.',
                reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
                )
            return 'REGISTRATION'
        user = BotUser.objects.get(telegram_id=update.message.from_user.id)
        user.position = user_reply
        user.save()
        update.message.reply_text(
            text='–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.',
            reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
        return 'MAIN_MENU'


def donate(update: Update, context: CallbackContext):
    payment_sum = validate_sum(update.message.text)

    chat_id = update.message.chat_id
    title = f"–î–æ–Ω–∞—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é {CURRENT_EVENT}"
    description = "–î–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é"
    payload = "Custom-Payload"
    currency = "RUB"
    prices = [LabeledPrice("Test", payment_sum)]

    context.bot.send_invoice(
        provider_token='381764678:TEST:40794',
        chat_id=chat_id,
        title=title,
        description=description,
        payload=payload,
        currency=currency,
        prices=prices,
        start_parameter=None
    )
    return 'MAIN_MENU'

def precheckout_callback(update: Update, context: CallbackContext):
    query = update.pre_checkout_query

    if query.invoice_payload != "Custom-Payload":
        query.answer(ok=False, error_message="Something went wrong...")
    else:
        query.answer(ok=True)

def successful_payment_callback(update: Update, context: CallbackContext):
    update.message.reply_text(
        text='–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ <3',
        reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return 'MAIN_MENU'


def handle_user_reply(update: Update, context: CallbackContext):
    if update.message:
        user_reply = update.message.text
        chat_id = update.message.chat_id
        user_id = update.message.from_user.id

    elif update.callback_query:
        user_reply = update.callback_query.data
        chat_id = update.callback_query.message.chat_id
    else:
        return

    if user_reply == '/start':
        user_state = 'START'
    else:
        user_state = states_database.get(chat_id)

    states_functions = {
        'START': start,
        'MAIN_MENU': main_menu,
        'CHOOSE_SECTION': choose_section,
        'REGISTRATION': registration,
        'REGISTRATION_END': registration_end,
        'CHOOSE_BLOCK': choose_block,
        'DONATION': donate,
    
    }

    state_handler = states_functions[user_state]
    next_state = state_handler(update, context)
    states_database.update({chat_id: next_state})


def main():
    load_dotenv()
    token = os.getenv('TG_API_TOKEN')
    updater = Updater(token)
    dispatcher = updater.dispatcher
    dispatcher.add_handler(CommandHandler('start', handle_user_reply))
    dispatcher.add_handler(MessageHandler(Filters.text, handle_user_reply))
    dispatcher.add_handler(CallbackQueryHandler(handle_user_reply))
    dispatcher.add_handler(MessageHandler(Filters.contact, registration))
    dispatcher.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    dispatcher.add_handler(MessageHandler(Filters.successful_payment, successful_payment_callback))
    updater.start_polling()


if __name__ == '__main__':
    main()
