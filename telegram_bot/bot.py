from dotenv import load_dotenv
import os
from django.conf import settings
from telegram import KeyboardButton, Update
from telegram.ext import Filters
from telegram.ext import CallbackContext
from telegram.ext import Updater
from telegram.ext import CommandHandler, MessageHandler, CallbackQueryHandler
from telegram import ReplyKeyboardMarkup


states_database = {}
main_menu_keyboard = [['–ü—Ä–æ–≥—Ä–∞–º–º–∞', '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É', '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'], ['–î–æ–Ω–∞—Ç']]
events_keyboard =  [['–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', '–ü–æ—Ç–æ–∫ "–≠–≤–µ—Ä–µ—Å—Ç"'],['–ü–æ—Ç–æ–∫ "–ê–ª—å–ø—ã"', '–ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'], ['–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']] 
contact_keyboard = [['–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã', '–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã']]


def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø–æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ü§ñ.',
        reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return 'MAIN_MENU'


def main_menu(update: Update, context: CallbackContext):
    user_reply = update.effective_message.text
    if user_reply == '–ü—Ä–æ–≥—Ä–∞–º–º–∞' or user_reply == '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É':
        update.message.reply_text(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç',
            reply_markup=ReplyKeyboardMarkup(events_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
        return 'CHOICE_EVENT'

    elif user_reply == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è':
        update.message.reply_text(
            text='–ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ',
            # reply_markup=ReplyKeyboardMarkup(, resize_keyboard=True)
        )
        return 'REGISTRATION'

    elif user_reply == '–î–æ–Ω–∞—Ç':
        update.message.reply_text(
            text='–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å'
        )
        return ''


def choice_event(update: Update, context: CallbackContext):
    user_reply = update.effective_message.text

    if user_reply == '–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è':
        update.message.reply_text(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞'
        )
    
    elif user_reply == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        update.message.reply_text(
            text='–í–æ–∑–≤—Ä–∞—Ç –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
        return 'MAIN_MENU'


def registration(update: Update, context: CallbackContext):
    if update.message.text:
        #–õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
        contact = update.effective_message.contact
        print(contact)
        user_name = update.message.from_user.name
        user_lastname = update.message.from_user.last_name
        user_phonenumber = update.message.from_user
        user_telegram_id = update.message.from_user.id
        update.message.reply_text(
            text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞.',
            reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
        return 'MAIN_MENU'


def handle_user_reply(update: Update, context: CallbackContext):
    if update.message:
        user_reply = update.message.text
        chat_id = update.message.chat_id
        user_id = update.message.from_user.id

    elif update.callback_query:
        user_reply = update.callback_query.data
        chat_id = update.callback_query.message.chat_id
    else:
        return

    if user_reply == '/start':
        user_state = 'START'
    else:
        user_state = states_database.get(chat_id)

    states_functions = {
        'START': start,
        'MAIN_MENU': main_menu,
        'CHOICE_EVENT': choice_event,
        'REGISTRATION': registration
    
    }

    state_handler = states_functions[user_state]
    next_state = state_handler(update, context)
    states_database.update({chat_id: next_state})


def main():
    load_dotenv()
    token = os.getenv('TG_API_TOKEN')
    updater = Updater(token)
    dispatcher = updater.dispatcher
    dispatcher.add_handler(CommandHandler('start', handle_user_reply))
    dispatcher.add_handler(MessageHandler(Filters.text, handle_user_reply))
    dispatcher.add_handler(CallbackQueryHandler(handle_user_reply))
    dispatcher.add_handler(MessageHandler(Filters.contact, registration))
    updater.start_polling()


if __name__ == '__main__':
    main()
