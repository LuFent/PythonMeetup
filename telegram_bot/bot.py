from email import message
from dotenv import load_dotenv
import os
from django.conf import settings
from random import shuffle
from telegram import KeyboardButton, Update
from telegram.ext import Filters
from telegram.ext import CallbackContext
from telegram.ext import Updater, filters
from telegram.ext import CommandHandler, MessageHandler, CallbackQueryHandler, PreCheckoutQueryHandler
from telegram import ReplyKeyboardMarkup, ParseMode, LabeledPrice, InlineKeyboardMarkup, InlineKeyboardButton
from .models import *
from .bot_tools import *
import functools


states_database = {}
main_menu_keyboard = [['–ü—Ä–æ–≥—Ä–∞–º–º–∞', '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É', '–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è'], ['–î–æ–Ω–∞—Ç']]
contact_keyboard = [['–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã', '–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã']]
accept_keyboard = [['–†–∞–∑—Ä–µ—à–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö', '–û—Ç–∫–∞–∑–∞—Ç—å –æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è']]

user_to_answer_id = {}

def start(update: Update, context: CallbackContext):
    current_event = Event.objects.get_current()
    if not current_event:
        update.message.reply_text(
            text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø–æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.',
        )
        return
    context.user_data['current_event'] = current_event
    context.user_data['sections'] = current_event.sections.all()

    visitor, _ = Access.objects.get_or_create(level="–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å")
    speaker, _ = Access.objects.get_or_create(level="–°–ø–∏–∫–µ—Ä")
    organizer, _ = Access.objects.get_or_create(level="–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä")
    moderator, _ = Access.objects.get_or_create(level="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä")

    user, _ = BotUser.objects.get_or_create(telegram_id=update.message.from_user.id)
    context.user_data['participant'], _ = Participant.objects.get_or_create(
        user=user,
        event=current_event,
        defaults={'level': visitor},
    )
    if context.user_data['participant'].level == speaker:
        main_menu_keyboard = [
            ['–ü—Ä–æ–≥—Ä–∞–º–º–∞', '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É', '–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è'],
            ['–î–æ–Ω–∞—Ç'],
            ['–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã'],
        ]
    else:
        main_menu_keyboard = [
            ['–ü—Ä–æ–≥—Ä–∞–º–º–∞', '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É', '–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è'],
            ['–î–æ–Ω–∞—Ç'],
        ]
    update.message.reply_text(
        text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø–æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ü§ñ.',
        reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return 'MAIN_MENU'


def main_menu(update: Update, context: CallbackContext):
    current_event = context.user_data['current_event']
    participant = Participant.objects.get(user__telegram_id=update.effective_chat.id)
    user_reply = update.effective_message.text
    if user_reply == '–ü—Ä–æ–≥—Ä–∞–º–º–∞':
        events_keyboard = list(map(lambda keyboard_row: [button.name for button in keyboard_row], chunk(current_event.sections.all(), 2)))
        events_keyboard.append(['–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
        update.message.reply_text(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç',
            reply_markup=ReplyKeyboardMarkup(events_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
        return 'CHOOSE_SECTION'

    elif user_reply == '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É':
        events_keyboard = list(map(lambda keyboard_row: [button.name for button in keyboard_row], chunk(current_event.sections.all(), 2)))
        events_keyboard.append(['–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
        update.message.reply_text(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç',
            reply_markup=ReplyKeyboardMarkup(events_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
        return 'CHOOSE_SECTION_FOR_QUESTION'

    elif user_reply == '–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è':
        if not participant.user.position:
            update.message.reply_text(
                text='–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ.',
                reply_markup=ReplyKeyboardMarkup([['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']], resize_keyboard=True, one_time_keyboard=True)
            )
            return 'REGISTRATION'
        other_users = list(BotUser.objects.exclude(telegram_id=participant.user.telegram_id).exclude(position=''))
        shuffle(other_users)
        if not other_users:
            update.message.reply_text(
                text='–ï—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –∏–∑—ä—è–≤–∏–ª –∂–µ–ª–∞–Ω–∏—è –æ–±—â–∞—Ç—å—Å—è',
                reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
            return 'MAIN_MENU'
        context.user_data['users_for_dialog'] = other_users
        context.user_data['user_index'] = 0
        send_invitation(update, context)
        return 'SEND_INVITATION'
            

    elif user_reply == '–î–æ–Ω–∞—Ç':
        update.message.reply_text(
            text='–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å'
        )
        return 'DONATION'

    elif user_reply == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã':
        for question in context.user_data['participant'].got_questions.all():
            
            update.message.reply_text(
                text=f'–í–æ–ø—Ä–æ—Å –æ—Ç {question.participant.user}\n{question.text}',
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton('–û—Ç–≤–µ—Ç–∏—Ç—å', callback_data=f'{question.participant.user.id}|answer')]]
                )
            )
            
        return 'ACCEPT_ANSWERING'


def accept_answering(update: Update, context: CallbackContext):
    user_data = update.callback_query.data
    
    user_to_answer_id.update({'current_user': user_data.split('|')[0]})
    if user_data:
        update.effective_message.reply_text(
            text=f'–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ'
        )
        return 'ANSWER_QUESTION'


def answer_question(update: Update, context: CallbackContext):
    user_reply = update.effective_message.text

    main_menu_keyboard = [
            ['–ü—Ä–æ–≥—Ä–∞–º–º–∞', '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É', '–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è'],
            ['–î–æ–Ω–∞—Ç'],
            ['–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã'],
        ]
    message_for = BotUser.objects.get(id=user_to_answer_id['current_user'])
    question = Question.objects.get(participant=Participant.objects.get(user=message_for))

    if user_reply:
        context.bot.send_message(
            chat_id=message_for.telegram_id,
            text = f'–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å "{question.text}": {user_reply}'
        )
        user_to_answer_id.clear()
        update.message.reply_text(
            text='–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
            reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
        return 'MAIN_MENU'


def choose_section(update: Update, context: CallbackContext):
    user_reply = update.effective_message.text
    current_event = context.user_data['current_event']
    sections = context.user_data['sections']
    if user_reply == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        update.message.reply_text(
            text='–í–æ–∑–≤—Ä–∞—Ç –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
        return 'MAIN_MENU'

    if user_reply == '–ù–∞–∑–∞–¥':
        events_keyboard = list(map(lambda keyboard_row: [button.name for button in keyboard_row],
                                   chunk(current_event.sections.all(), 2)))
        events_keyboard.append(['–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
        update.message.reply_text(
            text='–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —á–∞—Å—Ç–µ–π',
            reply_markup=ReplyKeyboardMarkup(events_keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
        return 'CHOOSE_SECTION'

    try:
        chosen_section = sections.get(name=user_reply)
        possible_blocks = chosen_section.blocks.all()
        blocks_keyboard = [[f'{block.name} | {chosen_section.name}'] for block in chosen_section.blocks.all()]
        blocks_keyboard.append(['–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ù–∞–∑–∞–¥'])
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞',
                                  reply_markup=ReplyKeyboardMarkup(blocks_keyboard,
                                                                   resize_keyboard=True,
                                                                   one_time_keyboard=True))
        return 'CHOOSE_BLOCK'

    except Exception:
        update.message.reply_text(text='–û—à–∏–±–∫–∞ ‚ùå',
                                  reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True,
                                                                   one_time_keyboard=True)
                                  )
        return 'MAIN_MENU'


def choose_block(update: Update, context: CallbackContext):
    user_reply = update.effective_message.text
    current_event = context.user_data['current_event']
    if user_reply == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        update.message.reply_text(
            text='–í–æ–∑–≤—Ä–∞—Ç –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
        return 'MAIN_MENU'

    if user_reply == '–ù–∞–∑–∞–¥':
        events_keyboard = list(map(lambda keyboard_row: [button.name for button in keyboard_row],
                                   chunk(current_event.sections.all(), 2)))
        events_keyboard.append(['–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
        update.message.reply_text(
            text='–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —á–∞—Å—Ç–µ–π',
            reply_markup=ReplyKeyboardMarkup(events_keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
        return 'CHOOSE_SECTION'

    try:
        chosen_block, chosen_section = map(lambda x: x.strip(), user_reply.split('|'))
        chosen_section = current_event.sections.get(name=chosen_section)
        chosen_block = chosen_section.blocks.get(name=chosen_block)

        blocks_keyboard = [[f'{block.name} | {chosen_section.name}'] for block in chosen_section.blocks.all()]
        blocks_keyboard.append(['–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ù–∞–∑–∞–¥'])
        update.message.reply_text(text=build_timetable(chosen_block),
                                  parse_mode=ParseMode.MARKDOWN,
                                  reply_markup=ReplyKeyboardMarkup(blocks_keyboard,
                                                                   resize_keyboard=True,
                                                                   one_time_keyboard=True))

        return 'CHOOSE_BLOCK'

    except Exception:
        update.message.reply_text(text='–û—à–∏–±–∫–∞ ‚ùå',
                                  reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True,
                                                                   one_time_keyboard=True)
                                  )
        return 'MAIN_MENU'


def choose_section_for_question(update: Update, context: CallbackContext):
    user_reply = update.effective_message.text
    current_event = context.user_data['current_event']
    sections = context.user_data['sections']
    if user_reply == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        update.message.reply_text(
            text='–í–æ–∑–≤—Ä–∞—Ç –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
        return 'MAIN_MENU'

    if user_reply == '–ù–∞–∑–∞–¥':
        events_keyboard = list(map(lambda keyboard_row: [button.name for button in keyboard_row],
                                   chunk(current_event.sections.all(), 2)))
        events_keyboard.append(['–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
        update.message.reply_text(
            text='–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —á–∞—Å—Ç–µ–π',
            reply_markup=ReplyKeyboardMarkup(events_keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
        return 'CHOOSE_SECTION'

    try:
        chosen_section = sections.get(name=user_reply)
        possible_blocks = chosen_section.blocks.all()
        blocks_keyboard = [[f'{block.name} | {chosen_section.name}'] for block in chosen_section.blocks.all()]
        blocks_keyboard.append(['–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ù–∞–∑–∞–¥'])
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞',
                                  reply_markup=ReplyKeyboardMarkup(blocks_keyboard,
                                                                   resize_keyboard=True,
                                                                   one_time_keyboard=True))
        return 'CHOOSE_BLOCK_FOR_QUESTION'

    except Exception:
        update.message.reply_text(text='–û—à–∏–±–∫–∞ ‚ùå',
                                  reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True,
                                                                   one_time_keyboard=True)
                                  )
        return 'MAIN_MENU'


def choose_block_for_question(update: Update, context: CallbackContext):
    user_reply = update.effective_message.text
    current_event = context.user_data['current_event']
    if user_reply == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        update.message.reply_text(
            text='–í–æ–∑–≤—Ä–∞—Ç –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
        return 'MAIN_MENU'

    if user_reply == '–ù–∞–∑–∞–¥':
        events_keyboard = list(map(lambda keyboard_row: [button.name for button in keyboard_row],
                                   chunk(current_event.sections.all(), 2)))
        events_keyboard.append(['–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
        update.message.reply_text(
            text='–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —á–∞—Å—Ç–µ–π',
            reply_markup=ReplyKeyboardMarkup(events_keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
        return 'CHOOSE_SECTION_FOR_QUESTION'

    # try:
    chosen_block, chosen_section = map(lambda x: x.strip(), user_reply.split('|'))
    chosen_section = current_event.sections.get(name=chosen_section)
    chosen_block = chosen_section.blocks.get(name=chosen_block)

    author_keyboard = [[f'{presentation.speaker.user} | {presentation.name}'] for presentation in chosen_block.presentations.all()]
    author_keyboard.append(['–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ù–∞–∑–∞–¥'])
    update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏–∫–µ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å',
                                parse_mode=ParseMode.MARKDOWN,
                                reply_markup=ReplyKeyboardMarkup(author_keyboard,
                                                                resize_keyboard=True,
                                                                one_time_keyboard=True))

    return 'CHOOSE_SPEAKER'

    # except Exception:
    #     update.message.reply_text(text='–û—à–∏–±–∫–∞ ‚ùå',
    #                               reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True,
    #                                                                one_time_keyboard=True)
    #                               )
    #     return 'MAIN_MENU'


def choose_speaker(update: Update, context: CallbackContext):
    user_reply = update.message.text
    current_event = context.user_data['current_event']
    if user_reply == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        update.message.reply_text(
            text='–í–æ–∑–≤—Ä–∞—Ç –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
        return 'MAIN_MENU'

    # if user_reply == '–ù–∞–∑–∞–¥':
    #     chosen_block, chosen_section = map(lambda x: x.strip(), user_reply.split('|'))
    #     chosen_section = current_event.sections.get(name=chosen_section)
    #     chosen_block = chosen_section.blocks.get(name=chosen_block)
    #     blocks_keyboard = [[f'{block.name} | {chosen_section.name}'] for block in chosen_section.blocks.all()]
    #     blocks_keyboard.append(['–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ù–∞–∑–∞–¥'])
    #     update.message.reply_text(
    #         text='–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –±–ª–æ–∫–æ–≤',
    #         reply_markup=ReplyKeyboardMarkup(blocks_keyboard, resize_keyboard=True, one_time_keyboard=True)
    #         )
    #     return 'CHOOSE_BLOCK_FOR_QUESTION'

    name, surname = user_reply.split("|")[0].strip().split()
    context.user_data['speaker'] = Participant.objects.get(
        user__name=name,
        user__surname=surname,
    )
    update.message.reply_text(
        text='–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å'
    )
    return 'ASK_QUESTION'


def ask_question(update: Update, context: CallbackContext):
    user_reply = update.effective_message.text
    current_event = context.user_data['current_event']
    if user_reply == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        update.message.reply_text(
            text='–í–æ–∑–≤—Ä–∞—Ç –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
        return 'MAIN_MENU'
    if user_reply == '–ù–∞–∑–∞–¥':
        chosen_block, chosen_section = map(lambda x: x.strip(), user_reply.split('|'))
        chosen_section = current_event.sections.get(name=chosen_section)
        chosen_block = chosen_section.blocks.get(name=chosen_block)

        author_keyboard = [[f'{presentation.speaker.user} | {presentation.name}'] for presentation in chosen_block.presentations]
        author_keyboard.append(['–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ù–∞–∑–∞–¥'])
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏–∫–µ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å',
                                  parse_mode=ParseMode.MARKDOWN,
                                  reply_markup=ReplyKeyboardMarkup(author_keyboard,
                                                                   resize_keyboard=True,
                                                                   one_time_keyboard=True))

        return 'CHOOSE_SPEAKER'
    
    text = user_reply
    participant = Participant.objects.get(
        user__telegram_id=update.effective_message.from_user.id
    )
    speaker = context.user_data['speaker']
    Question.objects.create(
        text=text,
        participant=participant,
        speaker=speaker,
    )
    update.message.reply_text(
        text='–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏–∫–µ—Ä—É.',
        reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return 'MAIN_MENU'


def registration(update: Update, context: CallbackContext):
    user_reply = update.message.text

    if user_reply:
        if user_reply == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            update.message.reply_text(
                text='–í–æ–∑–≤—Ä–∞—Ç –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
                )
            return 'MAIN_MENU'
        user_name = update.message.from_user.first_name
        user_lastname = update.message.from_user.last_name
        user_telegram_id = update.message.from_user.id

        user = BotUser.objects.get(
            telegram_id=user_telegram_id
        )


        if user.position:
            re_registrate_keyboard = [['–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é'], ['–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å']]
            update.message.reply_text(
                text=f'–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏: \
                    {user.name} {user.surname} \
                    \n–†–∞–±–æ—Ç–∞–µ—Ç–µ –≤ {user.company} –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ {user.position} ',

                reply_markup=ReplyKeyboardMarkup(re_registrate_keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
            return 'RE_REGISTRATE'

        user.name = user_name
        user.surname = user_lastname
        user.company = user_reply
        user.save()


        update.message.reply_text(
            text='–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å.',
            reply_markup=ReplyKeyboardMarkup([['–ù–∞–∑–∞–¥', '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']], resize_keyboard=True, one_time_keyboard=True)
        )
        return 'REGISTRATION_END'


def registration_end(update: Update, context: CallbackContext):
    user_reply = update.message.text

    if user_reply:
        if user_reply == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            update.message.reply_text(
                text='–í–æ–∑–≤—Ä–∞—Ç –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
                )
            return 'MAIN_MENU'

        elif user_reply == '–ù–∞–∑–∞–¥':
            update.message.reply_text(
                text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏.',
                reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
                )
            return 'REGISTRATION'
        user = BotUser.objects.get(telegram_id=update.message.from_user.id)
        user.position = user_reply
        user.save()
        update.message.reply_text(
            text='–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ß—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è" –µ—â–µ —Ä–∞–∑.',
            reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
        return 'MAIN_MENU'


def re_registrate(update: Update, context: CallbackContext):
    user_reply = update.message.text

    if user_reply == '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è':
        update.message.reply_text(text='–í–≤–µ–¥–∏—Ç–µ –∏–º—è')
        return 'CHANGE_NAME'

    if user_reply == '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é':
        update.message.reply_text(text='–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é')
        return 'CHANGE_SURNAME'

    if user_reply == '–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é':
        update.message.reply_text(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é')
        return 'CHANGE_COMPANY'

    if user_reply == '–ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å':
        update.message.reply_text(text='–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å')
        return 'CHANGE_POSITION'


def change_name(update: Update, context: CallbackContext):
    user_reply = update.message.text

    user_telegram_id = update.message.from_user.id

    user = BotUser.objects.get(
        telegram_id=user_telegram_id
    )

    user.name = user_reply
    user.save()
    update.message.reply_text(
        text='–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ',
        reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return 'MAIN_MENU'


def change_surname(update: Update, context: CallbackContext):
    user_reply = update.message.text

    user_telegram_id = update.message.from_user.id

    user = BotUser.objects.get(
        telegram_id=user_telegram_id
    )

    user.surname = user_reply
    user.save()
    update.message.reply_text(
        text='–§–∞–º–∏–ª–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞',
        reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return 'MAIN_MENU'


def change_company(update: Update, context: CallbackContext):
    user_reply = update.message.text

    user_telegram_id = update.message.from_user.id

    user = BotUser.objects.get(
        telegram_id=user_telegram_id
    )

    user.company = user_reply
    user.save()
    update.message.reply_text(
        text='–ö–æ–º–ø–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞',
        reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return 'MAIN_MENU'


def change_position(update: Update, context: CallbackContext):
    user_reply = update.message.text

    user_telegram_id = update.message.from_user.id

    user = BotUser.objects.get(
        telegram_id=user_telegram_id
    )

    user.position = user_reply
    user.save()
    update.message.reply_text(
        text='–î–æ–ª–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞',
        reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return 'MAIN_MENU'


def send_invitation(update: Update, context: CallbackContext):
    other_users = context.user_data['users_for_dialog']
    if update.callback_query:
        if update.callback_query.data != '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ':
            participant = Participant.objects.get(user__telegram_id=update.effective_chat.id)
            collegue_telegram_id = update.callback_query.data
            reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", url=f'tg://User?id={participant.user.telegram_id}')]])
            context.bot.send_message(
                collegue_telegram_id,
                text=f'–° –≤–∞–º–∏ —Ö–æ—á–µ—Ç –ø–æ–æ–±—â–∞—Ç—å—Å—è {participant.user.name} {participant.user.surname}\n{participant.user.company}\n{participant.user.position}',
                reply_markup=reply_markup,
            )

            return 'MAIN_MENU'
        context.user_data['user_index'] += 1
    user_index = context.user_data['user_index']
    if user_index == len(other_users):
        context.bot.send_message(
            update.effective_chat.id,
            text='–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –∂–µ–ª–∞—é—â–∏–π',
            reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
        return 'MAIN_MENU'
    collegue = other_users[user_index]
    text = f'{collegue.name} {collegue.surname}\n{collegue.company}\n{collegue.position}'
    reply_markup = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton(
                '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–æ–±—â–∞—Ç—å—Å—è',
                callback_data=collegue.telegram_id,
            )],
            [InlineKeyboardButton(
                '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ',
                callback_data='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ',
            )],
        ]
    )
    context.bot.send_message(
        update.effective_chat.id,
        text=text,
        reply_markup=reply_markup,
    )
    return 'SEND_INVITATION'


def donate(update: Update, context: CallbackContext):
    payment_sum = validate_sum(update.message.text)
    
    chat_id = update.message.chat_id
    current_event = context.user_data['current_event']
    title = f"–î–æ–Ω–∞—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é {current_event}"
    description = "–î–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é"
    payload = "Custom-Payload"
    currency = "RUB"
    prices = [LabeledPrice("Test", payment_sum)]

    context.bot.send_invoice(
        provider_token='381764678:TEST:40794',
        chat_id=chat_id,
        title=title,
        description=description,
        payload=payload,
        currency=currency,
        prices=prices,
        start_parameter=None
    )
    return 'MAIN_MENU'

def precheckout_callback(update: Update, context: CallbackContext):
    query = update.pre_checkout_query

    if query.invoice_payload != "Custom-Payload":
        query.answer(ok=False, error_message="Something went wrong...")
    else:
        query.answer(ok=True)

def successful_payment_callback(update: Update, context: CallbackContext):
    update.message.reply_text(
        text='–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ <3',
        reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    participant = BotUser.objects.get(telegram_id=update.message.from_user.id).participation
    current_event = context.user_data['current_event']
    sum_ = update.message['successful_payment']['total_amount']/100
    Donation.objects.create(participant=participant, event=current_event, reject=False, amount=sum_)

    return 'MAIN_MENU'


def handle_user_reply(update: Update, context: CallbackContext):
    if update.message:
        user_reply = update.message.text
        chat_id = update.message.chat_id
        user_id = update.message.from_user.id

    elif update.callback_query:
        user_reply = update.callback_query.data
        chat_id = update.callback_query.message.chat_id
    else:
        return

    if user_reply == '/start':
        user_state = 'START'
    else:
        user_state = states_database.get(chat_id)

    states_functions = {
        'START': start,
        'MAIN_MENU': main_menu,
        'CHOOSE_SECTION': choose_section,
        'REGISTRATION': registration,
        'REGISTRATION_END': registration_end,
        'CHOOSE_BLOCK': choose_block,
        'DONATION': donate,
        'CHOOSE_SECTION_FOR_QUESTION': choose_section_for_question,
        'CHOOSE_BLOCK_FOR_QUESTION': choose_block_for_question,
        'CHOOSE_SPEAKER': choose_speaker,
        'ASK_QUESTION': ask_question,
        'ACCEPT_ANSWERING': accept_answering,
        'ANSWER_QUESTION': answer_question,
        'SEND_INVITATION': send_invitation,
        'CHANGE_POSITION': change_position,
        'CHANGE_COMPANY': change_company,
        'CHANGE_NAME': change_name,
        'CHANGE_SURNAME': change_surname
        
    }

    state_handler = states_functions[user_state]
    next_state = state_handler(update, context)
    states_database.update({chat_id: next_state})


def main():
    load_dotenv()
    token = os.getenv('TG_API_TOKEN')
    updater = Updater(token)
    dispatcher = updater.dispatcher
    dispatcher.add_handler(CommandHandler('start', handle_user_reply))
    dispatcher.add_handler(MessageHandler(Filters.text, handle_user_reply))
    dispatcher.add_handler(CallbackQueryHandler(handle_user_reply))
    dispatcher.add_handler(MessageHandler(Filters.contact, registration))
    dispatcher.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    dispatcher.add_handler(MessageHandler(Filters.successful_payment, successful_payment_callback))
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
